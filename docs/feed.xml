<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-31T10:27:56-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Synodic Studio</title><author><name>Bryan Costanza</name><email>bryan.yeprd@synodic.co</email></author><entry><title type="html">Regional MVUM Maps Everywhere</title><link href="http://localhost:4000/blog/regional-mvum-maps-everywhere/" rel="alternate" type="text/html" title="Regional MVUM Maps Everywhere" /><published>2022-07-24T00:00:00-06:00</published><updated>2022-07-24T00:00:00-06:00</updated><id>http://localhost:4000/blog/regional-mvum-maps-everywhere</id><content type="html" xml:base="http://localhost:4000/blog/regional-mvum-maps-everywhere/"><![CDATA[<p>In a previous post, I was puzzled about why I <a href="/blog/web-example-mvum-collection/">could not find more regional maps</a> showing where the various MVUM maps were located. If “R5” was (for some reason) the Pacific Southwest, I figured there was a good chance that at least R1-R4 existed too, so I started digging around. An internet search for “R5 MVUM” took me to the <a href="https://www.fs.usda.gov/Internet/FSE_DOCUMENTS/fseprd614063.html">full page R5 map</a> that I added to the previous post. I then clicked on “Maps &amp; Publications” to get to <a href="https://www.fs.usda.gov/main/r5/maps-pubs">https://www.fs.usda.gov/main/r5/maps-pubs</a>. One link there got me to another full-page map for R4, and this had a URL clearly showing the region (<a href="https://www.fs.fed.us/mapfinder/?r=04">https://www.fs.fed.us/mapfinder/?r=04</a>).</p>

<p><a href="/assets/blog/2022-07-24-regional-mvum-maps-everywhere/screenshot-region-default.png"><img src="/assets/blog/2022-07-24-regional-mvum-maps-everywhere/screenshot-region-default.png" /></a></p>

<p><a href="/assets/blog/2022-07-24-regional-mvum-maps-everywhere/screenshot-region-default.png"><img src="/assets/blog/2022-07-24-regional-mvum-maps-everywhere/screenshot-region-zoomed.png" /></a></p>

<p>The loading performance of these maps in Safari is incredibly bad and doesn’t always complete, but They have the right idea. In Chrome, they seem to be loading reliably.</p>

<ul>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=01">R01: Northern</a> Montana, North Dakota, Idaho</li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=02">R02: Rocky Mountain</a> Colorado, Kansas, Wyoming, South Dakota</li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=03">R03: Southwest</a> Arizona, New Mexico</li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=04">R04: Intermountain</a> Utah, Nevada, California overlaps</li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=05">R05: Pacific Southwest</a> California, Hawaii</li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=06">R06: Pacific Northwest</a> Oregon, Washington</li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=07">R07: unspecified</a> shows continental US, with map rectangles showing when zoomed</li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=08">R08: Southern</a></li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=09">R09: Eastern</a></li>
  <li><a href="https://www.fs.fed.us/mapfinder/?r=10">R10: Alaska</a></li>
</ul>

<p><a href="https://www.fs.usda.gov/detail/r1/about-region/overview/?cid=stelprdb5110505"><img src="/assets/blog/2022-07-24-regional-mvum-maps-everywhere/stelprdb5136476.jpg" alt="USFS Regions Map" /></a></p>]]></content><author><name>Bryan Costanza</name><email>bryan.yeprd@synodic.co</email></author><category term="Wild Camp" /><category term="mapping" /><category term="MVUM" /><category term="USFS" /><summary type="html"><![CDATA[In a previous post, I was puzzled about why I could not find more regional maps showing where the various MVUM maps were located. If “R5” was (for some reason) the Pacific Southwest, I figured there was a good chance that at least R1-R4 existed too, so I started digging around. An internet search for “R5 MVUM” took me to the full page R5 map that I added to the previous post. I then clicked on “Maps &amp; Publications” to get to https://www.fs.usda.gov/main/r5/maps-pubs. One link there got me to another full-page map for R4, and this had a URL clearly showing the region (https://www.fs.fed.us/mapfinder/?r=04).]]></summary></entry><entry><title type="html">Create Directories for States and Forests</title><link href="http://localhost:4000/blog/forest-directories/" rel="alternate" type="text/html" title="Create Directories for States and Forests" /><published>2022-04-08T00:00:00-06:00</published><updated>2022-04-08T00:00:00-06:00</updated><id>http://localhost:4000/blog/forest-directories</id><content type="html" xml:base="http://localhost:4000/blog/forest-directories/"><![CDATA[<p>To stay organized as I collect maps and extract data from them, I wanted to create a set of directories organizing every national forest within the state it is (primarily) contained within.</p>

<h2 id="collect-every-forest">Collect Every Forest</h2>

<p>I used two sources to create my list:</p>
<ul>
  <li><a href="https://www.treehugger.com/complete-list-of-american-national-forests-1343075">Complete List of American National Forests</a> on Treehugger</li>
  <li><a href="https://en.wikipedia.org/wiki/List_of_national_forests_of_the_United_States">List of national forests of the United States - Wikipedia</a></li>
</ul>

<p>I then created a text file with all the raw data, looking like the content below in <code class="language-plaintext highlighter-rouge">List of States and Forests.txt</code>.</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gs">**Alabama**</span>
National Forests in Alabama
<span class="gs">**Alaska**</span>
Chugach National Forest
Tongass National Forest
<span class="gs">**Arizona**</span>
Kaibab National Forest
Coconino National Forest
Prescott National Forest
<span class="gs">**Arkansas**</span>
Ozark St. Francis National Forest
Ouachita National Forest
<span class="gs">**California**</span>
Angeles National Forest
Cleveland National Forest
Eldorado National Forest
Inyo National Forest
Klamath National Forest
Lake Tahoe Basin Management Unit
Lassen National Forest
Los Padres National Forest
Mendocino National Forest
Modoc National Forest
Plumas National Forest
San Bernardino National Forest
Sequoia National Forest
Shasta-Trinity National Forest
Sierra National Forest
Six Rivers National Forest
Stanislaus National Forest
Tahoe National Forest
<span class="gs">**Colorado**</span>
Arapaho and Roosevelt National Forests &amp; Pawnee National Grassland
Grand Mesa, Uncompahgre and Gunnison National Forests
Medicine Bow-Routt National Forests
Pike &amp; San Isabel National Forests, Cimarron &amp; Comanche National Grasslands
Rio Grande National Forest
San Juan National Forest
White River National Forest
<span class="gs">**Florida**</span>
National Forests in Florida
<span class="gs">**Georgia**</span>
Chattahoochee-Oconee National Forests
<span class="gs">**Idaho**</span>
Boise National Forest
Caribou-Targhee National Forest
Idaho Panhandle National Forests
Nez Perce-Clearwater National Forests
Payette National Forest
Salmon-Challis National Forest
Sawtooth National Forest
<span class="gs">**Illinois**</span>
Midewin National Tallgrass Prairie
Shawnee National Forest
<span class="gs">**Indiana**</span>
Hoosier National Forest
<span class="gs">**Kansas**</span>
Cimarron National Grassland
<span class="gs">**Kentucky**</span>
Daniel Boone National Forest
Land Between The Lakes National Recreation Area
<span class="gs">**Louisiana**</span>
Kisatchie National Forest
<span class="gs">**Michigan**</span>
Hiawatha National Forest
Huron-Manistee National Forests
Ottawa National Forest
<span class="gs">**Minnesota**</span>
Chippewa National Forest
Superior National Forest
<span class="gs">**Mississippi**</span>
National Forests in Mississippi
<span class="gs">**Missouri**</span>
Mark Twain National Forest
<span class="gs">**Montana**</span>
Beaverhead-Deerlodge National Forest
Bitterroot National Forest
Custer Gallatin National Forest
Flathead National Forest
Helena-Lewis and Clark National Forest
Kootenai National Forest
Lolo National Forest
<span class="gs">**Nebraska**</span>
Nebraska &amp; Samuel R. McKelvie National Forests - Buffalo Gap, Fort Pierre, &amp; Oglala National Grasslands
<span class="gs">**New Mexico**</span>
Cibola National Forest - Sandia RD
Lincoln National Forest
<span class="gs">**North Carolina**</span>
National Forests in North Carolina
<span class="gs">**Nevada**</span>
Humbolt-Toiyabe National Forest
<span class="gs">**New Hampshire**</span>
White Mountain National Forest
<span class="gs">**New York**</span>
Finger Lakes National Forest
<span class="gs">**North Dakota**</span>
Dakota Prairie Grasslands
<span class="gs">**Ohio**</span>
Wayne National Forest
<span class="gs">**Oklahoma**</span>
Black Kettle and McClellan Creek National Grasslands
Ouachita National Forest
<span class="gs">**Oregon**</span>
Columbia River Gorge National Scenic Area
Crooked River National Grassland
Fremont-Winema National Forest
Deschutes National Forest
Mt. Hood National Forest
Ochoco National Forest
Siuslaw National Forest
Umatilla National Forest
Willamette National Forest
<span class="gs">**Pennsylvania**</span>
Allegheny National Forest
<span class="gs">**South Carolina**</span>
Francis Marion National Forest
Sumter National Forest
<span class="gs">**South Dakota**</span>
Buffalo Gap National Grassland
Black Hills National Forest
Dakota Prairie Grasslands
Fort Pierre National Grassland
<span class="gs">**Tennessee**</span>
Cherokee National Forest
<span class="gs">**Texas**</span>
Black Kettle and McClellan Creek National Grasslands
National Forests in Texas
<span class="gs">**Utah**</span>
Ashley National Forest
Dixie National Forest
Fishlake National Forest
Manti-La Sal National Forest
Unita-Wasatch-Cache National Forest
<span class="gs">**Vermont**</span>
Green Mountain National Forest
<span class="gs">**Virginia**</span>
George Washington and Jefferson National Forests
<span class="gs">**Washington**</span>
Colville National Forest
Gifford Pinchot National Forest
Mt. Baker-Snoqualmie National Forest
Olympic National Forest
<span class="gs">**Wisconsin**</span>
Chequamegon-Nicolet National Forest
<span class="gs">**West Virginia**</span>
Monongahela National Forest
<span class="gs">**Wyoming**</span>
Bighorn National Forest
Bridger-Teton National Forest
Medicine Bow National Forest
Shoshone National Forest
Thunder Basin National Grassland
</code></pre></div></div>

<h2 id="make-directories">Make Directories</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># MakeStateAndForestDirectories.py
</span><span class="s">"""One directory per state, each state containing its forests"""</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">filename</span> <span class="o">=</span> <span class="s">"List of States and Forests.txt"</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
	<span class="n">lines</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>
	<span class="n">state</span> <span class="o">=</span> <span class="s">""</span>
	<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">line</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"**"</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
			<span class="n">state</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"**"</span><span class="p">,</span><span class="s">""</span><span class="p">)</span>
			<span class="n">os</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">forest</span> <span class="o">=</span> <span class="n">line</span>
			<span class="k">try</span><span class="p">:</span>
				<span class="n">os</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">state</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="n">forest</span><span class="p">)</span>
			<span class="k">except</span><span class="p">:</span>
				<span class="n">os</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">state</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">sep</span> <span class="o">+</span> <span class="n">forest</span> <span class="o">+</span> <span class="s">" DUPLICATED"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Bryan Costanza</name><email>bryan.yeprd@synodic.co</email></author><category term="Wild Camp" /><category term="Python" /><summary type="html"><![CDATA[To stay organized as I collect maps and extract data from them, I wanted to create a set of directories organizing every national forest within the state it is (primarily) contained within.]]></summary></entry><entry><title type="html">From GeoPDFs to Usable Data</title><link href="http://localhost:4000/blog/get-extents-for-all-geopds/" rel="alternate" type="text/html" title="From GeoPDFs to Usable Data" /><published>2022-04-08T00:00:00-06:00</published><updated>2022-04-08T00:00:00-06:00</updated><id>http://localhost:4000/blog/get-extents-for-all-geopds</id><content type="html" xml:base="http://localhost:4000/blog/get-extents-for-all-geopds/"><![CDATA[<p>In a preceding post <a href="/blog/geopdf-to-geojson/">GeoJSON form GeoPDF</a> we did some fast work to prove that we could get the data we need, but now we need to dig a little deeper to put it into a format that we think we can use.</p>

<h2 id="all-geopdf-content-to-json">All GeoPDF Content to JSON</h2>
<p>Create JSON files containing all the data retrieved with the GDAL library with the script below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># PDF2JSON.py
</span><span class="s">"""Create a JSON of the same base filename of every PDF in the directory, recursively, in-place"""</span>

<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>

<span class="n">filenames</span> <span class="o">=</span> <span class="n">glob</span><span class="p">(</span><span class="s">"**/*.pdf"</span><span class="p">,</span><span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">for</span> <span class="n">pdf</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
	<span class="n">json</span> <span class="o">=</span> <span class="n">pdf</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"pdf"</span><span class="p">,</span><span class="s">"json"</span><span class="p">)</span>
	<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
		<span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">([</span><span class="s">"gdalinfo"</span><span class="p">,</span><span class="n">pdf</span><span class="p">,</span><span class="s">"-json"</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">)</span>
		<span class="n">out</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span>
		<span class="n">outfile</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="parse--reform-useful-parts">Parse &amp; Reform Useful Parts</h2>
<p>Convert the raw JSON files into parsed JSON files with the content that I want with the file below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Process Maps with Extents.py
</span><span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">filenames</span> <span class="o">=</span> <span class="n">glob</span><span class="p">(</span><span class="s">"**/*.json"</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">failures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">json_filename</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">json_filename</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"parsed"</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="k">continue</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">json_filename</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">corners</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">"wgs84Extent"</span><span class="p">][</span><span class="s">"coordinates"</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">lats</span> <span class="o">=</span> <span class="p">[</span><span class="n">lat</span> <span class="k">for</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">lat</span><span class="p">)</span> <span class="ow">in</span> <span class="n">corners</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="c1"># 5th point repeats first so slice
</span>            <span class="n">lngs</span> <span class="o">=</span> <span class="p">[</span><span class="n">lng</span> <span class="k">for</span> <span class="p">(</span><span class="n">lng</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="n">corners</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="c1"># 5th point repeats first so slice
</span>
            <span class="n">lat_avg</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">lats</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lats</span><span class="p">))</span>
            <span class="n">lng_avg</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">lngs</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lngs</span><span class="p">))</span>

            <span class="nb">dict</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="nb">dict</span><span class="p">[</span><span class="s">"center"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="s">"latitude"</span><span class="p">:</span> <span class="n">lat_avg</span><span class="p">,</span>
                <span class="s">"longitude"</span><span class="p">:</span> <span class="n">lng_avg</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">lng</span><span class="p">,</span> <span class="n">lat</span><span class="p">)</span> <span class="ow">in</span> <span class="n">corners</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">lng</span> <span class="o">&lt;</span> <span class="n">lng_avg</span> <span class="ow">and</span> <span class="n">lat</span> <span class="o">&gt;</span> <span class="n">lat_avg</span><span class="p">:</span>
                    <span class="nb">dict</span><span class="p">[</span><span class="s">"northwest"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="s">"latitude"</span><span class="p">:</span> <span class="n">lat</span><span class="p">,</span>
                        <span class="s">"longitude"</span><span class="p">:</span> <span class="n">lng</span>
                    <span class="p">}</span>
                <span class="k">elif</span> <span class="n">lng</span> <span class="o">&lt;</span> <span class="n">lng_avg</span> <span class="ow">and</span> <span class="n">lat</span> <span class="o">&lt;</span> <span class="n">lat_avg</span><span class="p">:</span>
                    <span class="nb">dict</span><span class="p">[</span><span class="s">"southwest"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="s">"latitude"</span><span class="p">:</span> <span class="n">lat</span><span class="p">,</span>
                        <span class="s">"longitude"</span><span class="p">:</span> <span class="n">lng</span>
                    <span class="p">}</span>
                <span class="k">elif</span> <span class="n">lng</span> <span class="o">&gt;</span> <span class="n">lng_avg</span> <span class="ow">and</span> <span class="n">lat</span> <span class="o">&gt;</span> <span class="n">lat_avg</span><span class="p">:</span>
                    <span class="nb">dict</span><span class="p">[</span><span class="s">"northeast"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="s">"latitude"</span><span class="p">:</span> <span class="n">lat</span><span class="p">,</span>
                        <span class="s">"longitude"</span><span class="p">:</span> <span class="n">lng</span>
                    <span class="p">}</span>
                <span class="k">elif</span> <span class="n">lng</span> <span class="o">&gt;</span> <span class="n">lng_avg</span> <span class="ow">and</span> <span class="n">lat</span> <span class="o">&lt;</span> <span class="n">lat_avg</span><span class="p">:</span>
                    <span class="nb">dict</span><span class="p">[</span><span class="s">"southeast"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="s">"latitude"</span><span class="p">:</span> <span class="n">lat</span><span class="p">,</span>
                        <span class="s">"longitude"</span><span class="p">:</span> <span class="n">lng</span>
                    <span class="p">}</span>
            <span class="c1"># dict["rotationsCW"] = 0
</span>            <span class="n">new_fn</span> <span class="o">=</span> <span class="n">json_filename</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">".json"</span><span class="p">,</span><span class="s">"-parsed.json"</span><span class="p">)</span>
            <span class="n">content</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">dict</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">new_fn</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">new_file</span><span class="p">:</span>
                <span class="n">new_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">failures</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">json_filename</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"parsing failed.txt"</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">output</span><span class="p">:</span>
    <span class="n">output</span><span class="p">.</span><span class="n">writelines</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">l</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">failures</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="list-missing-rectangles">List Missing Rectangles</h2>
<p>Some files don’t give up their contents like the others, and they will need to be process manually later. We can get a list of the files with problems by running the script below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ListMissingLatLonExtent.py
</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>

<span class="n">missing</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">filenames</span> <span class="o">=</span> <span class="n">glob</span><span class="p">(</span><span class="s">"**/*.json"</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">for</span> <span class="n">json</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="nb">str</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">str</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"wgs84Extent"</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;</span> <span class="nb">str</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"testing"</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">missing</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">json</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="n">json</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"missing rectangle.txt"</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">output</span><span class="p">:</span>
    <span class="n">output</span><span class="p">.</span><span class="n">writelines</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">l</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">missing</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="final-usable-output">Final Usable Output</h2>
<p>The final result of the JSON that I will use in the app looks like the example below, <code class="language-plaintext highlighter-rouge">stelprdb5339604-parsed.json</code>, which aligns with the raw filename of the GeoPDF. I have added a rotation property because some raw PDFs are not oriented with the North at the top, and I would rather not modify the source file every time it is updated, so I will track it in the JSON file.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"center"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"latitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">40.248042999999996</span><span class="p">,</span><span class="w">
        </span><span class="nl">"longitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">-106.0403644</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"northwest"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"latitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">40.430488</span><span class="p">,</span><span class="w">
        </span><span class="nl">"longitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">-106.3666026</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"southwest"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"latitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">40.0597988</span><span class="p">,</span><span class="w">
        </span><span class="nl">"longitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">-106.359167</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"southeast"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"latitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">40.0655602</span><span class="p">,</span><span class="w">
        </span><span class="nl">"longitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">-105.7158853</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"northeast"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"latitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">40.436325</span><span class="p">,</span><span class="w">
        </span><span class="nl">"longitude"</span><span class="p">:</span><span class="w"> </span><span class="mf">-105.7198027</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"rotationsCW"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>Bryan Costanza</name><email>bryan.yeprd@synodic.co</email></author><category term="Wild Camp" /><category term="Python" /><category term="gdal" /><summary type="html"><![CDATA[In a preceding post GeoJSON form GeoPDF we did some fast work to prove that we could get the data we need, but now we need to dig a little deeper to put it into a format that we think we can use.]]></summary></entry><entry><title type="html">GeoPDF to GeoJSON Basics</title><link href="http://localhost:4000/blog/geopdf-to-geojson/" rel="alternate" type="text/html" title="GeoPDF to GeoJSON Basics" /><published>2022-04-05T00:00:00-06:00</published><updated>2022-04-05T00:00:00-06:00</updated><id>http://localhost:4000/blog/geopdf-to-geojson</id><content type="html" xml:base="http://localhost:4000/blog/geopdf-to-geojson/"><![CDATA[<p>The United States Forest Service (USFS) provides <a href="https://www.fs.usda.gov/visit/maps/mvum-faq">Motor Vehicle Use Maps</a> (MVUMs) in <a href="https://www.usgs.gov/faqs/what-geopdfr">GeoPDF</a> (<a href="https://en.wikipedia.org/wiki/GeoPDF">more</a>) format. I would like to put the map rectangles on a <code class="language-plaintext highlighter-rouge">MapKit</code> map as an overlay, but the map extents in the PDF were difficult to get to.</p>

<p>I met a helpful resource in the Denver Devs community that pointed me toward the <a href="https://pypi.org/project/GDAL/"><code class="language-plaintext highlighter-rouge">GDAL</code> Python library</a>. Between this library and the <a href="https://mygeodata.cloud/converter/geopdf-to-geojson">MyGeoData</a> website, I was able to get the coordinates into a <a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON</a> file in two ways.</p>

<h2 id="manually-using-mygeodata-website">Manually: Using MyGeoData Website</h2>

<p>This website was great for finding out what I was dealing with, but I was limited to one file at a time, all manually. To get the GeoJSON, just upload the PDF and then select “Dataset Info”. The map extents were output as a rectangle (well, quadrilateral at least)in the following format.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FeatureCollection"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"features"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Feature"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
      </span><span class="nl">"geometry"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Polygon"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"coordinates"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="p">[</span><span class="w">
            </span><span class="p">[</span><span class="mf">-105.72891082981914</span><span class="p">,</span><span class="w"> </span><span class="mf">39.7741391086867</span><span class="w"> </span><span class="p">],</span><span class="w">
            </span><span class="p">[</span><span class="mf">-105.2340227421917</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="mf">39.7741391086867</span><span class="w"> </span><span class="p">],</span><span class="w">
            </span><span class="p">[</span><span class="mf">-105.2340227421917</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="mf">40.07188076474783</span><span class="p">],</span><span class="w">
            </span><span class="p">[</span><span class="mf">-105.72891082981914</span><span class="p">,</span><span class="w"> </span><span class="mf">40.07188076474783</span><span class="p">],</span><span class="w">
            </span><span class="p">[</span><span class="mf">-105.72891082981914</span><span class="p">,</span><span class="w"> </span><span class="mf">39.7741391086867</span><span class="w"> </span><span class="p">]</span><span class="w">
          </span><span class="p">]</span><span class="w">
        </span><span class="p">]</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="scripted-bash-python-and-gdal">Scripted: Bash, Python, and GDAL</h2>

<p>I had to automate the process and found that I could pull that same metadata from the PDF and save it to JSON in the terminal with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># for a GeoPDF named map.pdf and JSON output map.json</span>
gdalinfo map.pdf <span class="nt">-json</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'[:space:]'</span> | <span class="nb">grep</span> <span class="nt">-o</span><span class="s1">' "wgs84Extent".*\]\]\]\}'</span> <span class="o">&gt;</span> map.json
</code></pre></div></div>

<p>which outputs (prettified afterward) the following content.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"wgs84Extent"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Polygon"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"coordinates"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">[</span><span class="w">
        </span><span class="p">[</span><span class="mf">-105.7320528</span><span class="p">,</span><span class="w"> </span><span class="mf">40.0698042</span><span class="p">],</span><span class="w">
        </span><span class="p">[</span><span class="mf">-105.7289108</span><span class="p">,</span><span class="w"> </span><span class="mf">39.7741391</span><span class="p">],</span><span class="w">
        </span><span class="p">[</span><span class="mf">-105.2330182</span><span class="p">,</span><span class="w"> </span><span class="mf">39.7761942</span><span class="p">],</span><span class="w">
        </span><span class="p">[</span><span class="mf">-105.2340227</span><span class="p">,</span><span class="w"> </span><span class="mf">40.0718808</span><span class="p">],</span><span class="w">
        </span><span class="p">[</span><span class="mf">-105.7320528</span><span class="p">,</span><span class="w"> </span><span class="mf">40.0698042</span><span class="p">]</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This works perfectly for most of the maps but</p>

<h3 id="references">References</h3>

<ul>
  <li><a href="https://gis.stackexchange.com/questions/121226/convert-geopdf-with-gdal">Convert GeoPDF with GDAL</a></li>
  <li><a href="https://gis.stackexchange.com/questions/259547/how-can-i-enable-pdf-support-in-gdal">Enable PDF Support in <code class="language-plaintext highlighter-rouge">gdal</code></a></li>
</ul>

<h2 id="other-references">Other References</h2>

<ul>
  <li><a href="https://gdal.org">GDAL Library Website</a></li>
  <li><a href="https://github.com/OSGeo/homebrew-osgeo4mac">osgeo4mac</a> I don’t recall if I ever used this</li>
  <li><a href="https://www.osgeo.org/projects/qgis/">QGIS</a> is a wildly powerful app that I enjoyed but did not need</li>
</ul>]]></content><author><name>Bryan Costanza</name><email>bryan.yeprd@synodic.co</email></author><category term="Wild Camp" /><category term="mapping" /><category term="GeoJSON" /><category term="GeoPDF" /><category term="Python" /><category term="Bash" /><category term="GDAL" /><summary type="html"><![CDATA[The United States Forest Service (USFS) provides Motor Vehicle Use Maps (MVUMs) in GeoPDF (more) format. I would like to put the map rectangles on a MapKit map as an overlay, but the map extents in the PDF were difficult to get to.]]></summary></entry><entry><title type="html">Web Example of Wild Camp Starting Context</title><link href="http://localhost:4000/blog/web-example-mvum-collection/" rel="alternate" type="text/html" title="Web Example of Wild Camp Starting Context" /><published>2022-04-04T00:00:00-06:00</published><updated>2022-04-04T00:00:00-06:00</updated><id>http://localhost:4000/blog/web-example-mvum-collection</id><content type="html" xml:base="http://localhost:4000/blog/web-example-mvum-collection/"><![CDATA[<p>I came across a surprisingly good example of what I am trying to achieve in the <a href="https://www.fs.usda.gov/detail/cleveland/maps-pubs/?cid=fseprd639835">R5 (Pacific Southwest Region) MVUM &amp; OSVUM Finder</a> (<a href="https://www.fs.usda.gov/Internet/FSE_DOCUMENTS/fseprd614063.html">and full-page equivalent</a>) with my native iOS experience. The web experience is pretty bad, but the intended map discovery path (map rectangles on a larger map to place them in more useful context) is almost identical. What I can’t figure out is why I have not found an equivalent map for any other area in the United States.</p>

<figure class="half">
    <a href="/assets/blog/2022-04-04-web-example-mvum-collection/screenshot-all-california.png"><img src="/assets/blog/2022-04-04-web-example-mvum-collection/screenshot-all-california.png" /></a>
    <a href="/assets/blog/2022-04-04-web-example-mvum-collection/screenshot-selected-map.png"><img src="/assets/blog/2022-04-04-web-example-mvum-collection/screenshot-selected-map.png" /></a>
    <figcaption>Screenshots of USFS tool showing MVUMs on larger California map</figcaption>
</figure>]]></content><author><name>Bryan Costanza</name><email>bryan.yeprd@synodic.co</email></author><category term="Wild Camp" /><category term="mapping" /><category term="MVUM" /><category term="USFS" /><summary type="html"><![CDATA[I came across a surprisingly good example of what I am trying to achieve in the R5 (Pacific Southwest Region) MVUM &amp; OSVUM Finder (and full-page equivalent) with my native iOS experience. The web experience is pretty bad, but the intended map discovery path (map rectangles on a larger map to place them in more useful context) is almost identical. What I can’t figure out is why I have not found an equivalent map for any other area in the United States.]]></summary></entry></feed>